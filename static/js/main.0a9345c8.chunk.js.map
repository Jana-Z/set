{"version":3,"sources":["Playingcard.js","App.js","index.js"],"names":["PlayingCard","props","drawOne","bind","color","filling","shape","fillStyle","strokeStyle","strokeWidth","defs","id","width","height","patternUnits","patternTransform","fill","stroke","x","y","cx","cy","rx","ry","points","main_style","backgroundColor","this","inFocus","margin","cursor","borderRadius","justifyContent","alignItems","display","flexDirection","shapes","i","amount","push","style","onClick","onMouseEnter","onMouseLeave","map","s","key","React","Component","FEATURES","App","pile","temp","index","ctr","length","Math","floor","random","curr_deck","slice","state","score","clicked","heading","message","status","cardInFocus","cardLostFocus","handleClick","renderCard","checkSet","addCards","idx","setState","deck","includes","indexOf","splice","pop","prevProps","prevState","cards","feature","valid","filter","card","curr_card","colStyle","padding","Container","fluid","Alert","variant","Heading","className","Button","Row","xs","md","lg","Col","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a9345c8.chunk.js","sourcesContent":["import React from 'react';\n\nclass PlayingCard extends React.Component{\n    constructor(props) {\n      super(props);\n      this.drawOne = this.drawOne.bind(this);\n    }\n\n    drawOne(color, filling, shape) {\n        let fillStyle = \"transparent\";\n        let strokeStyle = \"transparent\";\n        let strokeWidth = \"3\";\n        let defs = (\n            <defs>\n                <pattern id={`mottled-${color}`}  width=\"4\" height=\"4\" patternUnits=\"userSpaceOnUse\" patternTransform=\"rotate(45)\">\n                    <rect width=\"2\" height=\"4\"fill={color} />\n                </pattern>\n            </defs>\n        );\n\n        switch (filling) {\n            case 'full':\n                fillStyle = color;\n                break;\n            case 'none':\n                strokeStyle = color;\n                break;\n            case 'mottled':\n                fillStyle = `url(#mottled-${color})`;\n                strokeStyle = color;\n                strokeWidth = \"2\";\n                break;\n            default:\n                break;\n        }\n\n        switch (shape) {\n            case 'square':\n                return (\n                    <svg width= \"100\" height=\"50\">\n        \n                        {fillStyle === `url(#mottled-${color})` ? defs : null}      \n        \n                        <rect \n                            fill={fillStyle}\n                            stroke={strokeStyle}\n                            strokeWidth={strokeWidth}\n                            x=\"0\" y=\"0\" width=\"100\" height=\"45\"\n                        />\n                    </svg>\n                )\n            case 'circle':\n                return (\n                    <svg width= \"100\" height=\"50\">\n        \n                    {fillStyle === `url(#mottled-${color})` ? defs : null}  \n        \n                        <ellipse \n                            fill={fillStyle}\n                            stroke={strokeStyle}\n                            strokeWidth={strokeWidth}\n                            cx=\"50\" cy=\"25\"\n                            rx=\"47\" ry=\"22\"\n                        />\n                    </svg>\n                )\n            case 'swoosh':\n                return (\n                    <svg width= \"100\" height=\"50\">\n        \n                        {defs}\n\n                        <polygon points=\"0,50 30,12 70,38 100,0\"\n                            fill={fillStyle}\n                            stroke={strokeStyle}\n                            strokeWidth={strokeWidth}\n                        />\n                    </svg>\n                )\n        }\n    }\n\n    render() {\n        // Styling\n        let background = this.props.inFocus ? \"#c9d3f2\" : \"white\";\n        let main_style = {\n            backgroundColor: background,\n            margin: '0.5em',\n            cursor: 'pointer',\n            borderRadius: '5px',  // round edges\n            height: '10.5em',\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n        }\n        let shapes = []\n        for(let i=0; i<this.props.amount; i++){\n            shapes.push([this.props.color, this.props.filling, this.props.shape])\n        }\n        return (\n            <div\n                style={main_style}\n                onClick={this.props.onClick}\n                onMouseEnter={this.props.onMouseEnter}\n                onMouseLeave={this.props.onMouseLeave}>\n\n                {shapes.map((s, i) => {\n                    return (\n                        <div key={i}>\n                            {this.drawOne(...s)}\n                        </div>\n                    )\n                })}\n\n            </div>\n        )\n    }\n  }\n\n  export default PlayingCard","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PlayingCard from './Playingcard';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\n\nconst FEATURES = {\n//             blue        red        green\n    'color': ['#48b0ba', '#ba5d48', '#48ba5f'],\n    'shape': ['circle', 'square', 'swoosh'],\n    'filling': ['full', 'none', 'mottled'],\n    'amount': [1, 2, 3]\n}\n\n\nclass App extends React.Component{\n  \n  constructor(props) {\n    super(props);\n    \n    var pile = []\n    \n    for (const color of FEATURES.color) {\n      for (const shape of FEATURES.shape) {\n        for (const filling of FEATURES.filling) {\n          for (const amount of FEATURES.amount){\n            pile.push({\n              'color': color,\n              'shape': shape,\n              'filling': filling,\n              'amount': amount,\n              'inFocus': false\n            });\n          }\n        }\n      }\n    }\n    \n    // Shuffle pile\n    let ctr = pile.length;\n    let temp;\n    let index;\n    while (ctr > 0) {\n      index = Math.floor(Math.random() * ctr);\n      ctr--;\n      temp = pile[ctr];\n      pile[ctr] = pile[index];\n      pile[index] = temp;\n    }\n    \n    var curr_deck = pile.slice(0, 12)\n    \n    this.state =  {\n      pile: pile,\n      curr_deck: curr_deck,\n      score: 0,\n      clicked: [],\n      heading: {\n        message: 'Find a set',\n        status: 'secondary'},\n    }\n    \n    this.cardInFocus = this.cardInFocus.bind(this);\n    this.cardLostFocus = this.cardLostFocus.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderCard = this.renderCard.bind(this);\n    this.checkSet = this.checkSet.bind(this);\n    this.addCards = this.addCards.bind(this);\n\n  }\n  \n  handleClick(idx) {\n    \n    this.setState((state) => {\n        let deck = [...state.curr_deck]\n        if (state.clicked.length === 3) {\n          for (const card of deck) {\n            card.inFocus = false;\n          }\n          deck[idx].inFocus = true;\n          return {\n            clicked: [idx],\n            curr_deck: deck, \n          };\n        }\n        else if(!(state.clicked.includes(idx)) && state.clicked.length < 3){\n            let clicked = [...state.clicked, idx]\n            deck[idx].inFocus = true\n            return {\n              clicked: clicked,\n              curr_deck: deck\n            };\n        }\n        else {\n            deck[idx].inFocus = false\n            let clicked = [...state.clicked]\n            let index = clicked.indexOf(idx)\n            if (index!== -1){\n                clicked.splice(index, 1)\n            }\n            return {\n              clicked: clicked,\n              curr_deck: deck\n            };\n        }\n    });\n\n  }\n\n  addCards(x) {\n\n  this.setState((state) => {\n      let deck = [...state.curr_deck];\n      let pile = [...state.pile];\n      for(let i = 0; i < x ; i ++){\n        deck.push(pile.pop());\n      }\n      return {\n        curr_deck: deck,\n        pile: pile,\n      }\n    })\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Check for Set\n    if(this.state.clicked.length === 3 && this.state.clicked !== prevState.clicked) {\n      this.checkSet();\n    }\n  }\n\n  checkSet() {\n    \n    let cards = []\n    for(let i = 0; i < 4; i++){\n        cards.push(this.state.curr_deck[this.state.clicked[i]])\n    }\n    for (const feature in FEATURES) {\n        let valid = false\n        // Not all the same\n        if(cards[0][feature] === cards[1][feature] && cards[1][feature] === cards[2][feature]) {\n            valid = true\n        }\n        // Not all different\n        if(cards[0][feature] !== cards[1][feature] && cards[0][feature] !== cards[2][feature] && cards[1][feature] !== cards[2][feature]){\n            valid = true\n        }\n        if(!valid){\n            this.setState({\n                heading: {\n                  message: `Failed when checking the ${feature}`,\n                  status: 'danger',\n                }\n              });\n            return;\n        }\n    }\n\n    // valid set\n    this.setState((state) => {\n      let deck = [...state.curr_deck];\n      let pile = [...state.pile];\n      if(deck.length === 12){\n        for(const setCard of state.clicked){\n          deck[setCard] = pile.pop();\n        }\n        return {\n          curr_deck: deck,\n          pile: pile,\n          clicked: [],\n          score: state.score + 1,\n          heading: {\n            message: 'That was a valid set',\n            status: 'success',\n          }\n        }\n      }\n      else {\n        deck = deck.filter((card, idx) => !(state.clicked.includes(idx)))\n        return {\n          clicked: [],\n          curr_deck: deck,\n          score: state.score + 1,\n          heading: {\n            message: 'That was a valid set',\n            status: 'success',\n          }\n        };\n      }\n    });\n  }\n\n  cardInFocus(idx) {\n\n    this.setState((state) => {\n      let deck = [...state.curr_deck];\n      deck[idx].inFocus = true;\n      return {\n        curr_deck: deck,\n      };\n    });\n\n  }\n\n  cardLostFocus(idx) {\n\n  this.setState((state) => {\n    let deck = [...state.curr_deck];\n    deck[idx].inFocus = state.clicked.indexOf(idx) !== -1  ? true : false;\n    return {\n      curr_deck: deck,\n    };\n  });\n\n  }\n  \n  renderCard(i) {\n    \n    let curr_card = this.state.curr_deck[i]\n    return (\n      <PlayingCard\n        color={curr_card.color}\n        amount={curr_card.amount}\n        filling={curr_card.filling}\n        shape={curr_card.shape}\n        inFocus={curr_card.inFocus}\n        key={i}\n        onClick={() => this.handleClick(i)}\n        onMouseEnter={() => this.cardInFocus(i)}\n        onMouseLeave={() => this.cardLostFocus(i)}\n      />\n      )\n      \n  }\n    \n  render() {\n    let colStyle = {\n      alignItems: 'center',\n\n    }\n    return (\n      <div style={{backgroundColor: '#e9ecef', padding: '1em'}}>\n          <Container fluid>\n            <Alert variant={this.state.heading.status}>\n              <Alert.Heading>{this.state.heading.message}</Alert.Heading>\n              <p>Remaining cards: {this.state.pile.length} <br />\n                Sets found so far: {this.state.score}</p>\n                <div className=\"d-flex justify-content-end\">\n                  <Button onClick={() => this.addCards(3)} variant={`outline-${this.state.heading.status}`}>\n                    Get three more cards\n                  </Button>\n                </div>\n            </Alert>\n\n              <Row xs={2} md={3} lg={4}>\n                {this.state.curr_deck.map((card, idx) => \n                    <Col style={colStyle} key={idx}>\n                      {this.renderCard(idx)}\n                    </Col>\n                )}\n              </Row>\n    \n            </Container>\n    </div>\n  )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}